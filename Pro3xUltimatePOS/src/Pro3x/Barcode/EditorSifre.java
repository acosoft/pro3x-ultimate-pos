/*
 * Pro3x Community project
 * Copyright (C) 2009  Aleksandar Zgonjan
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, http://www.gnu.org/licenses/gpl.html
 * and open the template in the editor.
 */

/*
 * EditorSifre.java
 *
 * Created on 30.11.2009., 14:55:27
 */

package Pro3x.Barcode;

import Acosoft.Processing.Pro3App;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.EventObject;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.TableCellEditor;
import org.jdesktop.application.Action;
import org.jvnet.substance.SubstancePanelUI;

/**
 *
 * @author nonstop
 */
public class EditorSifre extends javax.swing.JPanel implements TableCellEditor
{
    private Object staraVrijednost;
    private boolean canceled = false;

    /** Creates new form EditorSifre */
    public EditorSifre() {
        initComponents();

        setBorder(editor.getBorder());
        setBackground(editor.getBackground());

        setOpaque(true);

        editor.setBorder(null);
        editor.setOpaque(true);

        addFocusListener(new FocusAdapter() {

            @Override
            public void focusGained(FocusEvent e)
            {
                editor.requestFocusInWindow();
            }
        });
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        synchronized(g)
        {
            g.setColor(editor.getBackground());
            Rectangle rect = g.getClipBounds();
            g.fillRect(0, 0, (int)rect.getWidth(), (int)rect.getHeight());    
        }

        paintBorder(g);
        paintChildren(g);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seqIcon = new javax.swing.JLabel();
        editor = new javax.swing.JTextField();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getResourceMap(EditorSifre.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N

        seqIcon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        seqIcon.setIcon(resourceMap.getIcon("seqIcon.icon")); // NOI18N
        seqIcon.setText(resourceMap.getString("seqIcon.text")); // NOI18N
        seqIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        seqIcon.setName("seqIcon"); // NOI18N
        seqIcon.setPreferredSize(new java.awt.Dimension(20, 16));
        seqIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                obradiClick(evt);
            }
        });

        editor.setText(resourceMap.getString("editor.text")); // NOI18N
        editor.setName("editor"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seqIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(seqIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void obradiClick(java.awt.event.MouseEvent evt)//GEN-FIRST:event_obradiClick
    {//GEN-HEADEREND:event_obradiClick
        PrimjeniAutoSifriranje();
    }//GEN-LAST:event_obradiClick


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField editor;
    private javax.swing.JLabel seqIcon;
    // End of variables declaration//GEN-END:variables

    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)
    {
        canceled = false;
        staraVrijednost = value;
        editor.setText(value.toString());
        return this;
    }

    public Object getCellEditorValue()
    {
        if(canceled)
            return staraVrijednost;
        else
            return editor.getText();
    }

    public boolean isCellEditable(EventObject anEvent)
    {
        return true;
    }

    public boolean shouldSelectCell(EventObject anEvent)
    {
        return true;
    }

    public boolean stopCellEditing()
    {
        for(CellEditorListener listener : listeners.subList(0, listeners.size()))
        {
            listener.editingStopped(new ChangeEvent(this));
        }
        
        return true;
    }

    public void cancelCellEditing()
    {
        canceled = true;
        
        for(CellEditorListener listener : listeners.subList(0, listeners.size()))
        {
            listener.editingCanceled(new ChangeEvent(this));
        }
    }

    private List<CellEditorListener> listeners = new LinkedList<CellEditorListener>();

    public void addCellEditorListener(CellEditorListener l)
    {
        listeners.add(l);
    }

    public void removeCellEditorListener(CellEditorListener l)
    {
        listeners.remove(l);
    }

    @Action
    public void PrimjeniAutoSifriranje()
    {
        editor.setText(Pro3App.getApplication().getAutoSifre().sljedecaFormatiranaSifra());
    }

}
