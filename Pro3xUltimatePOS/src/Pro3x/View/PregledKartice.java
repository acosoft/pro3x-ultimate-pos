/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PregledKartice.java
 *
 * Created on 2009.12.31, 05:06:04
 */

package Pro3x.View;

import Acosoft.Processing.Components.DateCellRenderer;
import Acosoft.Processing.Components.ExceptionView;
import Acosoft.Processing.Components.NumberCellRenderer;
import Acosoft.Processing.Components.Tasks;
import Acosoft.Processing.DataBox.KarticaStavkeRacuna;
import Acosoft.Processing.DataBox.Roba;
import Acosoft.Processing.DataBox.RobaKartica;
import Acosoft.Processing.Pro3App;
import Acosoft.Processing.Pro3Postavke;
import Acosoft.Processing.Pro3View;
import Pro3x.Code.ReportingServices;
import Pro3x.Kalkulacije.Model.Kalkulacija;
import Pro3x.Kalkulacije.Model.KarticaStavkeKalkulacije;
import Pro3x.Kalkulacije.PregledKalkulacije;
import java.awt.Rectangle;
import java.beans.PropertyVetoException;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.CompoundBorder;
import javax.swing.border.TitledBorder;
import net.sf.jasperreports.engine.JasperPrint;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author Aco
 */
public class PregledKartice extends javax.swing.JInternalFrame {

    private Long sid = null;
    private NumberFormat nf;

    /** Creates new form PregledKartice */
    public PregledKartice(Roba roba)
    {
        this(roba, null);
    }

    public PregledKartice(Roba roba, Long sid)
    {
        nf = NumberFormat.getInstance();
        nf.setMinimumFractionDigits(3);
        nf.setMaximumFractionDigits(3);

        
        NumberFormat nfc = NumberFormat.getInstance();
        nfc.setMinimumFractionDigits(2);
        nfc.setMaximumFractionDigits(2);
        
        setArtikal(roba);

        initComponents();

        setTitle(getTitle() + " " + roba.getNaziv());
        
        CompoundBorder cb = (CompoundBorder) infoPanel.getBorder();
        TitledBorder border = (TitledBorder) cb.getInsideBorder();
        border.setTitle(roba.getNaziv());
        
        try 
        {
            infoLabel.setText(MessageFormat.format("Trenutna cijena: {0} {1}", nfc.format(roba.getMaloprodajnaCijena()), Pro3Postavke.getInfo().getValuta()));
        } 
        catch (Exception ex) 
        {
            Logger.getLogger(PregledKartice.class.getName()).log(Level.SEVERE, null, ex);
            infoLabel.setText(MessageFormat.format("Trenutna cijena: {0} {1}", nfc.format(roba.getMaloprodajnaCijena()), "kn"));
        }
        
        IzracunajStanje();
        this.sid = sid;
    }

    protected Roba artikal;

    public Roba getArtikal() {
        return artikal;
    }

    public final void setArtikal(Roba artikal)
    {
        this.artikal = artikal;
    }

    private void ConfigureQueryParams()
    {
        query.setParameter("roba", getArtikal());
    }

    protected RobaKartica kartica;

    public RobaKartica getKartica() {
        return kartica;
    }

    public void setKartica(RobaKartica kartica) {
        this.kartica = kartica;
    }
    
    private void IzracunajStanje()
    {
        double stanjeArtikla = 0D;

        for(RobaKartica kart : kartice)
            stanjeArtikla += kart.getKolicinaUlaz() - kart.getKolicinaIzlaz();

        stanje.setText("Raspolo≈æivo: " + nf.format(stanjeArtikla) + " " + getArtikal().getMjera());
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        manager = Pro3x.Persistence.createEntityManagerFactory().createEntityManager();
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getResourceMap(PregledKartice.class);
        query = java.beans.Beans.isDesignTime() ? null : manager.createQuery(resourceMap.getString("query.query")); // NOI18N
        ConfigureQueryParams();
        kartice = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(query.getResultList()));
        SortirajKartice();
        infoPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        stanje = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        cmdDokument = new javax.swing.JButton();
        cmdZatvori = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grid = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(resourceMap.getString("nova-kartica-artikla.title")); // NOI18N
        setName("nova-kartica-artikla"); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        infoPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(10, 5, 5, 1), javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("infoPanel.border.insideBorder.title")))); // NOI18N
        infoPanel.setName("infoPanel"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(0, 0));

        stanje.setFont(stanje.getFont().deriveFont((float)16));
        stanje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stanje.setText(resourceMap.getString("stanje.text")); // NOI18N
        stanje.setName("stanje"); // NOI18N

        infoLabel.setFont(infoLabel.getFont().deriveFont((float)24));
        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText(resourceMap.getString("infoLabel.text")); // NOI18N
        infoLabel.setName("infoLabel"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(stanje, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                    .addComponent(infoLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stanje)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
                .addContainerGap())
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(infoPanel, java.awt.BorderLayout.PAGE_START);

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getActionMap(PregledKartice.class, this);
        jButton1.setAction(actionMap.get("IspisKartice")); // NOI18N
        jButton1.setMaximumSize(new java.awt.Dimension(120, 30));
        jButton1.setMinimumSize(new java.awt.Dimension(120, 30));
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setPreferredSize(new java.awt.Dimension(120, 30));
        jPanel2.add(jButton1);

        cmdDokument.setAction(actionMap.get("IzvorniDokument")); // NOI18N
        cmdDokument.setText(resourceMap.getString("cmdDokument.text")); // NOI18N
        cmdDokument.setMaximumSize(new java.awt.Dimension(120, 30));
        cmdDokument.setMinimumSize(new java.awt.Dimension(120, 30));
        cmdDokument.setName("cmdDokument"); // NOI18N
        cmdDokument.setPreferredSize(new java.awt.Dimension(120, 30));
        jPanel2.add(cmdDokument);

        cmdZatvori.setAction(actionMap.get("Zatvori")); // NOI18N
        cmdZatvori.setText(resourceMap.getString("cmdZatvori.text")); // NOI18N
        cmdZatvori.setMaximumSize(new java.awt.Dimension(120, 30));
        cmdZatvori.setMinimumSize(new java.awt.Dimension(120, 30));
        cmdZatvori.setName("cmdZatvori"); // NOI18N
        cmdZatvori.setPreferredSize(new java.awt.Dimension(120, 30));
        jPanel2.add(cmdZatvori);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        grid.setAutoCreateRowSorter(true);
        grid.setName("grid"); // NOI18N
        grid.setRowHeight(35);
        grid.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, kartice, grid, "");
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${datum}"));
        columnBinding.setColumnName("Datum");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${opis}"));
        columnBinding.setColumnName("Opis");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicinaUlaz}"));
        columnBinding.setColumnName("Kolicina Ulaz");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${ulaznaCijena}"));
        columnBinding.setColumnName("Ulazna Cijena");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${ulaznaVrijednost}"));
        columnBinding.setColumnName("Ulazna Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicinaIzlaz}"));
        columnBinding.setColumnName("Kolicina Izlaz");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${reportMaloprodajnaCijena}"));
        columnBinding.setColumnName("Report Maloprodajna Cijena");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${izlaznaCijena}"));
        columnBinding.setColumnName("Izlazna Cijena");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${kartica}"), grid, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"), "odabranaKartica"); // NOI18N
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(grid);
        grid.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("grid.columnModel.title0")); // NOI18N
        grid.getColumnModel().getColumn(0).setCellRenderer(new DateCellRenderer("dd.MM.yyyy"));
        grid.getColumnModel().getColumn(1).setPreferredWidth(200);
        grid.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("grid.columnModel.title1")); // NOI18N
        grid.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("grid.columnModel.title3")); // NOI18N
        grid.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer(false, true, 3, 3));
        grid.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("grid.columnModel.title2")); // NOI18N
        grid.getColumnModel().getColumn(3).setCellRenderer(new NumberCellRenderer());
        grid.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("grid.columnModel.title5")); // NOI18N
        grid.getColumnModel().getColumn(4).setCellRenderer(new NumberCellRenderer());
        grid.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("grid.columnModel.title7")); // NOI18N
        grid.getColumnModel().getColumn(5).setCellRenderer(new NumberCellRenderer(false, true, 3, 3));
        grid.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("grid.columnModel.title4")); // NOI18N
        grid.getColumnModel().getColumn(6).setCellRenderer(new NumberCellRenderer());
        grid.getColumnModel().getColumn(7).setHeaderValue(resourceMap.getString("grid.columnModel.title6")); // NOI18N
        grid.getColumnModel().getColumn(7).setCellRenderer(new NumberCellRenderer());

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameOpened
    {//GEN-HEADEREND:event_formInternalFrameOpened
        if(sid != null)
        {
//            RobaKartica odabranaKartica = manager.find(RobaKartica.class, sid);
//            setKartica(odabranaKartica);

//            int model = kartice.indexOf(odabranaKartica);
            int model = IndexKartice(sid);
            int index = grid.convertRowIndexToView(model);

            grid.setRowSelectionInterval(index, index);

            int visinaReda = grid.getRowHeight();
            Rectangle rect = grid.getVisibleRect();

            rect.setLocation((int) rect.getX(), visinaReda * index);
            grid.scrollRectToVisible(rect);
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private int IndexKartice(long oznaka)
    {
        int index = 0;
        
        for(RobaKartica kartica : kartice)
        {
            if(kartica.getSid() == oznaka) 
                return index;
            else
                index++;
        }
        
        return -1;
    }

    @Action
    public void Zatvori()
    {
        try
        {
            setClosed(true);
        }
        catch (PropertyVetoException ex)
        {
            Logger.getLogger(PregledKartice.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Action
    public void IzvorniDokument()
    {
        if(getKartica() != null)
        {
            Pro3View view = (Pro3View) Pro3App.getApplication().getMainView();

            if(getKartica() instanceof KarticaStavkeRacuna)
            {
                KarticaStavkeRacuna karticaStavke = (KarticaStavkeRacuna) getKartica();
                //view.Show(new IzmjenaRacuna(karticaStavke.getStavka().getRacunKljuc()));
                ReportingServices.IspisRacuna(karticaStavke.getStavka().getRacunKljuc(), false);
            }
            else if(getKartica() instanceof KarticaStavkeKalkulacije)
            {
                KarticaStavkeKalkulacije karticaKalkulacije = (KarticaStavkeKalkulacije) getKartica();
                Kalkulacija kalkulacija = karticaKalkulacije.getStavka().getKalkulacija();
                view.Show(new PregledKalkulacije(kalkulacija.getId()));
            }
            else Tasks.showMessage("Izvorni dokument odabrane kartice se nemo≈æe automatski odrediti.");
        }
        else Tasks.showMessage("Izaberite karticu ƒçiji izvorni dokument ≈æelite otvoriti");
    }

    private void SortirajKartice()
    {
        Collections.sort(kartice, new Comparator<RobaKartica>() {

            public int compare(RobaKartica o1, RobaKartica o2)
            {
                return o1.getDatum().compareTo(o2.getDatum());
            }
        });
    }

    @Action
    public void IspisKartice() 
    {
        if(kartice.isEmpty())
        {
            Pro3App app = Pro3App.getApplication();
            app.getContext().getTaskService().execute(new Task(app) 
            {
                @Override
                protected Object doInBackground() throws Exception 
                {
                    setMessage("Kartica artikla je prazna. Nema dovoljno podataka za ispis.");
                    return null;
                }
            });
            
            return;
        }
        
        try
        {
            HashMap params = new HashMap();
            params.put("logo", Pro3Postavke.getLogoStream());
            params.put("zaglavlje", Pro3Postavke.getInfo().getZaglavlje());
            params.put("artikal", getArtikal());

            List<RobaKartica> data = kartice;
            
            JasperPrint jp = ReportingServices.Reports.KarticaArtikla.load(params, data);
            ReportingServices.ShowReport(jp, "Ispis zapisnika o promjeni cijena", "ispis-zapisnika-promjena-cijena");
        }
        catch (Exception ex)
        {
            Logger.getLogger(PregledKartice.class.getName()).log(Level.SEVERE, null, ex);
            new ExceptionView(ex).setVisible(true);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdDokument;
    private javax.swing.JButton cmdZatvori;
    private javax.swing.JTable grid;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private java.util.List<RobaKartica> kartice;
    private javax.persistence.EntityManager manager;
    private javax.persistence.Query query;
    private javax.swing.JLabel stanje;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
