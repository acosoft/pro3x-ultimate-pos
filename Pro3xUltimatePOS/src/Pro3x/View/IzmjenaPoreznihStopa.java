/*
 * Pro3x Community project
 * Copyright (C) 2009  Aleksandar Zgonjan
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, http://www.gnu.org/licenses/gpl.html
 * and open the template in the editor.
 */

/*
 * IzmjenaPoreznihStopa.java
 *
 * Created on 2009.07.24, 12:27:46
 */

package Pro3x.View;

import Acosoft.Processing.Components.Code;
import Acosoft.Processing.Components.DateCellEditor;
import Pro3x.BasicView;
import Acosoft.Processing.Components.DateCellRenderer;
import Acosoft.Processing.Components.NumberCellEditor;
import Acosoft.Processing.Components.NumberCellRenderer;
import Acosoft.Processing.DataBox.PoreznaStopa;
import Acosoft.Processing.Pro3App;
import java.awt.Rectangle;
import java.beans.PropertyVetoException;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.jdesktop.application.Application;
import org.jdesktop.application.Task;

/**
 *
 * @author nonstop
 */
public class IzmjenaPoreznihStopa extends BasicView {

    private boolean changed = false;

    /** Creates new form IzmjenaPoreznihStopa */
    public IzmjenaPoreznihStopa() {
        initComponents();

        grid.getModel().addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e)
            {
                if(e.getType() != TableModelEvent.DELETE)
                    changed = true;
            }
        });

        Code.ScrollToLastRow(grid);
        Code.SelectLastRow(grid);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getResourceMap(IzmjenaPoreznihStopa.class);
        queryStope = java.beans.Beans.isDesignTime() ? null : getProManager().createQuery(resourceMap.getString("queryStope.query")); // NOI18N
        listStope = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(queryStope.getResultList());
        jScrollPane1 = new javax.swing.JScrollPane();
        grid = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                ProvjeriIzmjene(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        grid.setAutoCreateRowSorter(true);
        grid.setName("grid"); // NOI18N
        grid.setRowHeight(24);
        grid.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listStope, grid);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${opis}"));
        columnBinding.setColumnName("Opis");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${postotak}"));
        columnBinding.setColumnName("Postotak");
        columnBinding.setColumnClass(Double.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(grid);
        grid.getColumnModel().getColumn(0).setPreferredWidth(300);
        grid.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("grid.columnModel.title0")); // NOI18N
        grid.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("grid.columnModel.title1")); // NOI18N
        grid.getColumnModel().getColumn(1).setCellEditor(new NumberCellEditor());
        grid.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Zatvori(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DodajNovuStopu(evt);
            }
        });

        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IzbrisiPoreznuStopu(evt);
            }
        });

        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpremiPromjene(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5)
                    .addComponent(jButton4)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DodajNovuStopu(java.awt.event.ActionEvent evt)//GEN-FIRST:event_DodajNovuStopu
    {//GEN-HEADEREND:event_DodajNovuStopu
        PoreznaStopa stopa = new PoreznaStopa();
        stopa.setKljuc(UUID.randomUUID().toString());
        
        listStope.add(stopa);

        int mindex = listStope.indexOf(stopa);
        int vindex = grid.getRowSorter().convertRowIndexToView(mindex);

        grid.editCellAt(vindex, 0);
        Rectangle src = grid.getVisibleRect();
        src.setLocation(0, grid.getRowHeight() * vindex);
        grid.scrollRectToVisible(src);

        grid.getEditorComponent().requestFocusInWindow();

        getProManager().getTransaction().begin();
        getProManager().persist(stopa);
        getProManager().getTransaction().commit();

    }//GEN-LAST:event_DodajNovuStopu

    private void IzbrisiPoreznuStopu(java.awt.event.ActionEvent evt)//GEN-FIRST:event_IzbrisiPoreznuStopu
    {//GEN-HEADEREND:event_IzbrisiPoreznuStopu
        int result = JOptionPane.showConfirmDialog(this, "Želite li izbrisati odabrani redak?",
                "Upozorenje", JOptionPane.YES_NO_OPTION);
        
        if(result == JOptionPane.YES_OPTION)
        {
            int vx = grid.getSelectedRow();
            int mx = grid.getRowSorter().convertRowIndexToModel(vx);

            PoreznaStopa stopa = (PoreznaStopa)listStope.get(mx);
            getProManager().getTransaction().begin();
            getProManager().remove(stopa);
            getProManager().getTransaction().commit();
            listStope.remove(stopa);
        }
    }//GEN-LAST:event_IzbrisiPoreznuStopu

    private void Zatvori(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Zatvori
    {//GEN-HEADEREND:event_Zatvori
        try
        {
            setClosed(true);
        }
        catch (PropertyVetoException ex)
        {
            Logger.getLogger(IzmjenaPoreznihStopa.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Zatvori

    private void SpremiPromjene(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SpremiPromjene
    {//GEN-HEADEREND:event_SpremiPromjene
        changed = false;
        Pro3App app = Pro3App.getApplication();
        app.getContext().getTaskService().execute(new SpremiIzmjeneTask(app));
    }//GEN-LAST:event_SpremiPromjene

    private void ProvjeriIzmjene(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_ProvjeriIzmjene
    {//GEN-HEADEREND:event_ProvjeriIzmjene
        if(changed)
        {
            int result = JOptionPane.showConfirmDialog(this, "Želite li spremiti napravljene izmjene?",
                    "Upozorenje", JOptionPane.YES_NO_OPTION);

            if(result == JOptionPane.YES_OPTION)
            {
                SpremiPromjene(null);
            }
        }
}//GEN-LAST:event_ProvjeriIzmjene

    private class SpremiIzmjeneTask extends Task
    {
        public SpremiIzmjeneTask(Application app)
        {
            super(app);
        }

        @Override
        protected Object doInBackground() throws Exception
        {
            setMessage("Spremam izmjene poreznih stopa.");

            getProManager().getTransaction().begin();
            for(PoreznaStopa x : listStope)
            {
                setMessage("Spremam izmjenu " + x.getOpis() + "stope.");
                getProManager().merge(x);
            }
            getProManager().getTransaction().commit();

            setMessage("Izmjene poreznih stopa su uspješno spremljene.");
            return true;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable grid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private java.util.List<Acosoft.Processing.DataBox.PoreznaStopa> listStope;
    private javax.persistence.Query queryStope;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
