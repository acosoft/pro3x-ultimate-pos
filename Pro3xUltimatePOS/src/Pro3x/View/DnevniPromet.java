/*
 * Pro3x Community project
 * Copyright (C) 2009  Aleksandar Zgonjan
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, http://www.gnu.org/licenses/gpl.html
 * and open the template in the editor.
 */

/*
 * DnevniPromet.java
 *
 * Created on 24.09.2009., 19:15:40
 */

package Pro3x.View;

import Acosoft.Processing.Components.ExceptionView;
import Acosoft.Processing.Components.InfoRacun;
import Acosoft.Processing.Components.NumberCellRenderer;
import Acosoft.Processing.Components.Tasks;
import Acosoft.Processing.DataBox.GrupaArtikala;
import Acosoft.Processing.Pro3Postavke;
import Acosoft.Processing.Pro3View;
import Pro3x.Code.AgregacijaPrometa;
import Pro3x.Code.VrsteUplate;
import java.awt.Dimension;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.io.InputStream;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.TemporalType;
import javax.swing.JInternalFrame;
import javax.swing.border.TitledBorder;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.swing.JRViewer;
import org.jdesktop.application.Action;

/**
 *
 * @author nonstop
 */
public class DnevniPromet extends Pro3x.BasicView {

    private SimpleDateFormat sf = new SimpleDateFormat("dd.MM.yyyy");

    /** Creates new form DnevniPromet */
    public DnevniPromet() 
    {
        this(null);
//        initComponents();
//        datum.setText(sf.format(Calendar.getInstance().getTime()));
//
//        if(grid.getRowCount() > 0)
//            grid.setRowSelectionInterval(0, 0);
//
//        getRootPane().setDefaultButton(cmdIspis);
//        cmdZakljuci.setVisible(!General.isUserMode());
//
//        IzracunUkupnogPrometa();
    }

    private String query;
    private String getQuery()
    {
        return query;
    }
    
    public DnevniPromet(String query)
    {
        this.query = query;
        
        initComponents();
        datum.setText(sf.format(Calendar.getInstance().getTime()));

        if(grid.getRowCount() > 0)
            grid.setRowSelectionInterval(0, 0);

        getRootPane().setDefaultButton(cmdIspis);

        IzracunUkupnogPrometa();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        proManager = java.beans.Beans.isDesignTime() ? null : getProManager();
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getResourceMap(DnevniPromet.class);
        stavke = java.beans.Beans.isDesignTime() ? null : proManager.createQuery(resourceMap.getString("stavke.query")); // NOI18N
        PodesiRaspon();
        gotovinskiPromet = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(ListaPrometa(VrsteUplate.GotovinskaUplata)));
        bezGotovinskiPromet = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(ListaPrometa(VrsteUplate.BezGotovinskaUplata)));
        american = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(ListaPrometa(VrsteUplate.Amex)));
        visa = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(ListaPrometa(VrsteUplate.Visa)));
        diners = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(ListaPrometa(VrsteUplate.Diners)));
        maestro = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(ListaPrometa(VrsteUplate.Maestro)));
        mastercard = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(ListaPrometa(VrsteUplate.Mastercard)));
        stornoPromet = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(ListaPrometa(VrsteUplate.Storno)));
        jPanel4 = new javax.swing.JPanel();
        panUkupno = new javax.swing.JPanel();
        ukupniPromet = new javax.swing.JLabel();
        tabs = new javax.swing.JTabbedPane();
        tabGotovinski = new javax.swing.JScrollPane();
        grid = new javax.swing.JTable();
        tabBezGotovinski = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tabAmerican = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        tabDiners = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        tabVisa = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        tabMaestercard = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        tabMaestro = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        tabStorno = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        ispisDirektno = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        datum = new javax.swing.JTextField();
        cmdOsvjezi = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        cmdIspis = new javax.swing.JButton();
        cmdZatvori = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(resourceMap.getString("pregled-dnevnog-prometa.title")); // NOI18N
        setName("pregled-dnevnog-prometa"); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 5, 5, 1));
        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setLayout(new java.awt.BorderLayout());

        panUkupno.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panUkupno.border.title"))); // NOI18N
        panUkupno.setName("panUkupno"); // NOI18N
        panUkupno.setPreferredSize(new java.awt.Dimension(68, 120));
        panUkupno.setLayout(new java.awt.BorderLayout());

        ukupniPromet.setFont(resourceMap.getFont("ukupniPromet.font")); // NOI18N
        ukupniPromet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ukupniPromet.setText(resourceMap.getString("ukupniPromet.text")); // NOI18N
        ukupniPromet.setName("ukupniPromet"); // NOI18N
        panUkupno.add(ukupniPromet, java.awt.BorderLayout.CENTER);

        jPanel4.add(panUkupno, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel4, java.awt.BorderLayout.PAGE_START);

        tabs.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        tabs.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabs.setName("tabs"); // NOI18N
        tabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsStateChanged(evt);
            }
        });

        tabGotovinski.setName("tabGotovinski"); // NOI18N

        grid.setAutoCreateRowSorter(true);
        grid.setName("tablica-dnevni-promet"); // NOI18N
        grid.setRowHeight(24);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gotovinskiPromet, grid);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${naziv}"));
        columnBinding.setColumnName("Naziv");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${vrijednost}"));
        columnBinding.setColumnName("Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tabGotovinski.setViewportView(grid);
        grid.getColumnModel().getColumn(0).setPreferredWidth(100);
        grid.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tablica.Kolona.Naziv")); // NOI18N
        grid.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tablica.Kolona.Kolicina")); // NOI18N
        grid.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());
        grid.getColumnModel().getColumn(2).setPreferredWidth(100);
        grid.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tablica.Kolona.Vrijednost")); // NOI18N
        grid.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer());

        tabs.addTab(resourceMap.getString("tabGotovinski.TabConstraints.tabTitle"), tabGotovinski); // NOI18N

        tabBezGotovinski.setName("tabBezGotovinski"); // NOI18N

        jTable1.setName("jTable1"); // NOI18N
        jTable1.setRowHeight(24);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, bezGotovinskiPromet, jTable1);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${naziv}"));
        columnBinding.setColumnName("Naziv");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${vrijednost}"));
        columnBinding.setColumnName("Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tabBezGotovinski.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tablica.Kolona.Naziv")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tablica.Kolona.Kolicina")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());
        jTable1.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tablica.Kolona.Vrijednost")); // NOI18N
        jTable1.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer());

        tabs.addTab(resourceMap.getString("tabBezGotovinski.TabConstraints.tabTitle"), tabBezGotovinski); // NOI18N

        tabAmerican.setName("tabAmerican"); // NOI18N

        jTable2.setName("jTable2"); // NOI18N
        jTable2.setRowHeight(24);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, american, jTable2);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${naziv}"));
        columnBinding.setColumnName("Naziv");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${vrijednost}"));
        columnBinding.setColumnName("Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tabAmerican.setViewportView(jTable2);
        jTable2.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tablica.Kolona.Naziv")); // NOI18N
        jTable2.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tablica.Kolona.Kolicina")); // NOI18N
        jTable2.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());
        jTable2.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tablica.Kolona.Vrijednost")); // NOI18N
        jTable2.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer());

        tabs.addTab(resourceMap.getString("tabAmerican.TabConstraints.tabTitle"), tabAmerican); // NOI18N

        tabDiners.setName("tabDiners"); // NOI18N

        jTable3.setName("jTable3"); // NOI18N
        jTable3.setRowHeight(24);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, diners, jTable3);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${naziv}"));
        columnBinding.setColumnName("Naziv");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${vrijednost}"));
        columnBinding.setColumnName("Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tabDiners.setViewportView(jTable3);
        jTable3.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tablica.Kolona.Naziv")); // NOI18N
        jTable3.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tablica.Kolona.Kolicina")); // NOI18N
        jTable3.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());
        jTable3.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tablica.Kolona.Vrijednost")); // NOI18N
        jTable3.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer());

        tabs.addTab(resourceMap.getString("tabDiners.TabConstraints.tabTitle"), tabDiners); // NOI18N

        tabVisa.setName("tabVisa"); // NOI18N

        jTable4.setName("jTable4"); // NOI18N
        jTable4.setRowHeight(24);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, visa, jTable4);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${naziv}"));
        columnBinding.setColumnName("Naziv");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${vrijednost}"));
        columnBinding.setColumnName("Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tabVisa.setViewportView(jTable4);
        jTable4.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tablica.Kolona.Naziv")); // NOI18N
        jTable4.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tablica.Kolona.Kolicina")); // NOI18N
        jTable4.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());
        jTable4.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tablica.Kolona.Vrijednost")); // NOI18N
        jTable4.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer());

        tabs.addTab(resourceMap.getString("tabVisa.TabConstraints.tabTitle"), tabVisa); // NOI18N

        tabMaestercard.setName("tabMaestercard"); // NOI18N

        jTable6.setName("jTable6"); // NOI18N
        jTable6.setRowHeight(24);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, mastercard, jTable6);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${naziv}"));
        columnBinding.setColumnName("Naziv");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${vrijednost}"));
        columnBinding.setColumnName("Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tabMaestercard.setViewportView(jTable6);
        jTable6.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tablica.Kolona.Naziv")); // NOI18N
        jTable6.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tablica.Kolona.Kolicina")); // NOI18N
        jTable6.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());
        jTable6.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tablica.Kolona.Vrijednost")); // NOI18N
        jTable6.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer());

        tabs.addTab(resourceMap.getString("tabMaestercard.TabConstraints.tabTitle"), tabMaestercard); // NOI18N

        tabMaestro.setName("tabMaestro"); // NOI18N

        jTable5.setName("jTable5"); // NOI18N
        jTable5.setRowHeight(24);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, maestro, jTable5);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${naziv}"));
        columnBinding.setColumnName("Naziv");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${vrijednost}"));
        columnBinding.setColumnName("Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tabMaestro.setViewportView(jTable5);
        jTable5.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tablica.Kolona.Naziv")); // NOI18N
        jTable5.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tablica.Kolona.Kolicina")); // NOI18N
        jTable5.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());
        jTable5.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tablica.Kolona.Vrijednost")); // NOI18N
        jTable5.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer());

        tabs.addTab(resourceMap.getString("tabMaestro.TabConstraints.tabTitle"), tabMaestro); // NOI18N

        tabStorno.setName("tabStorno"); // NOI18N

        jTable7.setName("jTable7"); // NOI18N
        jTable7.setRowHeight(24);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stornoPromet, jTable7);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${naziv}"));
        columnBinding.setColumnName("Naziv");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${vrijednost}"));
        columnBinding.setColumnName("Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tabStorno.setViewportView(jTable7);
        jTable7.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tablica.Kolona.Naziv")); // NOI18N
        jTable7.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tablica.Kolona.Kolicina")); // NOI18N
        jTable7.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());
        jTable7.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tablica.Kolona.Vrijednost")); // NOI18N
        jTable7.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer());

        tabs.addTab(resourceMap.getString("tabStorno.TabConstraints.tabTitle"), tabStorno); // NOI18N

        getContentPane().add(tabs, java.awt.BorderLayout.CENTER);
        tabs.getAccessibleContext().setAccessibleName(resourceMap.getString("jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel2.setName("jPanel2"); // NOI18N

        ispisDirektno.setText(resourceMap.getString("ispisDirektno.text")); // NOI18N
        ispisDirektno.setMaximumSize(new java.awt.Dimension(103, 30));
        ispisDirektno.setName("ispisDirektno"); // NOI18N
        ispisDirektno.setPreferredSize(new java.awt.Dimension(125, 30));
        jPanel2.add(ispisDirektno);

        jPanel3.add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1);

        datum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        datum.setText(resourceMap.getString("datum.text")); // NOI18N
        datum.setName("datum"); // NOI18N
        datum.setPreferredSize(new java.awt.Dimension(200, 30));
        datum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                datumFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ParseDatum(evt);
            }
        });
        jPanel1.add(datum);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getActionMap(DnevniPromet.class, this);
        cmdOsvjezi.setAction(actionMap.get("PromjeniDatumPregledaPrometa")); // NOI18N
        cmdOsvjezi.setText(resourceMap.getString("cmdOsvjezi.text")); // NOI18N
        cmdOsvjezi.setName("cmdOsvjezi"); // NOI18N
        cmdOsvjezi.setPreferredSize(new java.awt.Dimension(90, 30));
        jPanel1.add(cmdOsvjezi);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setName("jSeparator1"); // NOI18N
        jSeparator1.setPreferredSize(new java.awt.Dimension(6, 30));
        jPanel1.add(jSeparator1);

        cmdIspis.setAction(actionMap.get("IspisPrometa")); // NOI18N
        cmdIspis.setText(resourceMap.getString("cmdIspis.text")); // NOI18N
        cmdIspis.setName("cmdIspis"); // NOI18N
        cmdIspis.setPreferredSize(new java.awt.Dimension(90, 30));
        jPanel1.add(cmdIspis);

        cmdZatvori.setAction(actionMap.get("Zatvori")); // NOI18N
        cmdZatvori.setText(resourceMap.getString("cmdZatvori.text")); // NOI18N
        cmdZatvori.setName("cmdZatvori"); // NOI18N
        cmdZatvori.setPreferredSize(new java.awt.Dimension(90, 30));
        jPanel1.add(cmdZatvori);

        jPanel3.add(jPanel1, java.awt.BorderLayout.LINE_END);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ParseDatum(java.awt.event.FocusEvent evt)//GEN-FIRST:event_ParseDatum
    {//GEN-HEADEREND:event_ParseDatum
        try
        {
            datum.setText(sf.format(sf.parse(datum.getText())));
        }
        catch (ParseException ex)
        {
            Calendar cal = Calendar.getInstance();
            datum.setText(sf.format(cal.getTime()));
            
            Tasks.showMessage("Neprihvatljivi format datuma. Pravilno unesite datum.");
            Logger.getLogger(DnevniPromet.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        getRootPane().setDefaultButton(cmdIspis);
    }//GEN-LAST:event_ParseDatum

    private void datumFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_datumFocusGained
    {//GEN-HEADEREND:event_datumFocusGained
        getRootPane().setDefaultButton(cmdOsvjezi);
    }//GEN-LAST:event_datumFocusGained

    private void tabsStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_tabsStateChanged
    {//GEN-HEADEREND:event_tabsStateChanged
        IzracunUkupnogPrometa();
    }//GEN-LAST:event_tabsStateChanged

    private void PodesiRaspon()
    {
        if(getQuery() != null)
            stavke = proManager.createNamedQuery(getQuery());
        
        PodesiRaspon(null);
    }

    private void PodesiRaspon(Date datum)
    {
        Calendar cal = Calendar.getInstance();

        if(datum != null)
            cal.setTime(datum);

        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);

        stavke.setParameter("pocetak", cal.getTime(), TemporalType.TIMESTAMP);
        cal.add(Calendar.DAY_OF_MONTH, 1);
        stavke.setParameter("kraj", cal.getTime(), TemporalType.TIMESTAMP);
    }

    private List ListaPrometa(VrsteUplate uplata)
    {
        stavke.setParameter("vrstaUplate", uplata.toString());
        List temp = stavke.getResultList();
        List<AgregacijaPrometa> data = new LinkedList<AgregacijaPrometa>();

        for(Object item : temp)
        {
            Object[] items = (Object[])item;

            //if(items[0] == null) items[0] = "Bez grupe";
            
            String grupa = "Bez grupe";
            
            if(items[0] instanceof GrupaArtikala)
            {
                GrupaArtikala grupaArtikala = (GrupaArtikala) items[0];
                if(grupaArtikala != null) 
                    grupa = grupaArtikala.getNaziv();
            }
            else
            {
                grupa = (String) items[0];
            }
            

            AgregacijaPrometa agg = new AgregacijaPrometa();

            agg.setNaziv(grupa);
            agg.setKolicina((Double)items[1]);
            agg.setVrijednost((Double)items[2]);
            agg.setOsnovica((Double)items[3]);
            agg.setVrsta(uplata.getPrint());

            data.add(agg);

            //data.add(new AgregacijaPrometa((String)items[0], (Double)items[1], (Double)items[2], (Double)items[3]));
        }

        return data;
    }

    @Action
    public void PromjeniDatumPregledaPrometa()
    {
        try
        {
            PodesiRaspon(sf.parse(datum.getText()));

            gotovinskiPromet.clear();
            gotovinskiPromet.addAll(ListaPrometa(VrsteUplate.GotovinskaUplata));

            bezGotovinskiPromet.clear();
            bezGotovinskiPromet.addAll(ListaPrometa(VrsteUplate.BezGotovinskaUplata));

            american.clear();
            american.addAll(ListaPrometa(VrsteUplate.Amex));

            diners.clear();
            diners.addAll(ListaPrometa(VrsteUplate.Diners));

            visa.clear();
            visa.addAll(ListaPrometa(VrsteUplate.Visa));

            mastercard.clear();
            mastercard.addAll(ListaPrometa(VrsteUplate.Mastercard));

            maestro.clear();
            maestro.addAll(ListaPrometa(VrsteUplate.Maestro));

            stornoPromet.clear();
            stornoPromet.addAll(ListaPrometa(VrsteUplate.Storno));

            if(grid.getRowCount() > 0 && grid.getSelectedRows().length == 0)
                grid.setRowSelectionInterval(0, 0);

            IzracunUkupnogPrometa();
        }
        catch (ParseException ex)
        {
            Tasks.showMessage("Neprihvatljivi format datum. Pravilno unesite datum.");
            Logger.getLogger(DnevniPromet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Action
    public void Zatvori()
    {
        try
        {
            setClosed(true);
        }
        catch (PropertyVetoException ex)
        {
            Logger.getLogger(DnevniPromet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //TODO: malo srediti funkciju, npr. klasa umjesto liste kao retun value
    private ArrayList<Double> IzracunUkupnogPrometa()
    {
        ArrayList<Double> sume = new ArrayList<Double>();
        Double suma = 0D;
        Double osnovica = 0D;

        VrsteUplate vrsta = null;

        List<AgregacijaPrometa> agregacija = null;

        if(tabs.getSelectedIndex() == 0)
        {
            agregacija = gotovinskiPromet;
            vrsta = VrsteUplate.GotovinskaUplata;
        }
        else if(tabs.getSelectedIndex() == 1)
        {
            agregacija = bezGotovinskiPromet;
            vrsta = VrsteUplate.BezGotovinskaUplata;
        }
        else if(tabs.getSelectedIndex() == 2)
        {
            agregacija = american;
            vrsta = VrsteUplate.Amex;
        }
        else if(tabs.getSelectedIndex() == 3)
        {
            agregacija = diners;
            vrsta = VrsteUplate.Diners;
        }
        else if(tabs.getSelectedIndex() == 4)
        {
            agregacija = visa;
            vrsta = VrsteUplate.Visa;
        }
        else if(tabs.getSelectedIndex() == 5)
        {
            agregacija = mastercard;
            vrsta = VrsteUplate.Mastercard;
        }
        else if(tabs.getSelectedIndex() == 6)
        {
            agregacija = maestro;
            vrsta = VrsteUplate.Maestro;
        }
        else if(tabs.getSelectedIndex() == 7)
        {
            agregacija = stornoPromet;
            vrsta = VrsteUplate.Storno;
        }

        for(AgregacijaPrometa agg : agregacija)
        {
            suma += agg.getVrijednost();
            osnovica += agg.getOsnovica();
        }

        sume.add(suma);
        sume.add(osnovica);

        NumberFormat nf = NumberFormat.getInstance();
        nf.setMinimumFractionDigits(2);
        nf.setMaximumFractionDigits(2);
        
        try
        {
            String valuta = Pro3Postavke.getInfo().getValuta();
            TitledBorder border = (TitledBorder) panUkupno.getBorder();
            border.setTitle(vrsta.getPrint());
            panUkupno.repaint();

            String prikazPrometa = "<html><center>"
                    + nf.format(suma) + " " + valuta
                    + "<div style=\"font-size:12pt;\">Ukupni promet: " 
                    + nf.format(SumaUkupnogPrometa())
                    + " " + valuta + "</div></center></html>";
            
            ukupniPromet.setText(prikazPrometa);
        }
        catch (Exception ex)
        {
            Logger.getLogger(DnevniPromet.class.getName()).log(Level.SEVERE, null, ex);
        }

        return sume;
    }
    
    public Double IzracunPrometa(List<AgregacijaPrometa> promet)
    {
        Double suma = 0D;
        
        for(AgregacijaPrometa agg : promet)
            suma += agg.getVrijednost();
        
        return suma;
    }

    public Double SumaUkupnogPrometa()
    {
        Double suma = 0D;

        suma += IzracunPrometa(american);
        suma += IzracunPrometa(bezGotovinskiPromet);
        suma += IzracunPrometa(diners);
        suma += IzracunPrometa(gotovinskiPromet);
        suma += IzracunPrometa(maestro);
        suma += IzracunPrometa(visa);
        suma += IzracunPrometa(mastercard);
        suma += IzracunPrometa(stornoPromet);

        return suma;
    }

    @Action
    public void IspisPrometa()
    {
        try
        {
            String parsedDate = sf.format(sf.parse(datum.getText()));
            InfoRacun info = Pro3Postavke.getInfo();

            HashMap params = new HashMap();
            params.put("Zaglavlje", info.getZaglavlje());

            ArrayList<Double> sume = IzracunUkupnogPrometa();
            params.put("Ukupno", sume.get(0));
            params.put("Osnovica", sume.get(1));
            params.put("Porez", sume.get(0) - sume.get(1));

            params.put("Opis", "Dnevni promet: " + parsedDate);
            params.put("Valuta", info.getValuta());

            try
            {
                params.put("Logo", Pro3Postavke.getLogoStream());
            }
            catch(IOException ex)
            {
                Logger.getLogger(DnevniPromet.class.getName()).log(Level.WARNING, null, ex);
                InputStream iLogo = DnevniPromet.class.getResourceAsStream("resources/logo.png");
                params.put("Logo", iLogo);
            }

            List<AgregacijaPrometa> sviPrometi = new LinkedList<AgregacijaPrometa>();
            sviPrometi.addAll(gotovinskiPromet);

            if(bezGotovinskiPromet.size() > 0) sviPrometi.addAll(bezGotovinskiPromet);
            if(american.size() > 0) sviPrometi.addAll(american);
            if(diners.size() > 0) sviPrometi.addAll(diners);
            if(visa.size() > 0) sviPrometi.addAll(visa);
            if(maestro.size() > 0) sviPrometi.addAll(maestro);
            if(mastercard.size() > 0) sviPrometi.addAll(mastercard);
            if(stornoPromet.size() > 0) sviPrometi.addAll(stornoPromet);
            
            JRBeanCollectionDataSource js = new JRBeanCollectionDataSource(sviPrometi);
            InputStream rstream = DnevniPromet.class.getResourceAsStream("resources/Pro3xRacun_KategoriziranDnevniPromet_POS.jasper");
            JasperReport jr = (JasperReport)JRLoader.loadObject(rstream);

            JasperPrint jp = JasperFillManager.fillReport(jr, params, js);

            if(ispisDirektno.isSelected())
            {
                JasperPrintManager.printReport(jp, false);
            }
            else
            {
                JRViewer jv = new JRViewer(jp);
                JInternalFrame jf = new JInternalFrame("Pregled dnevnog prometa za datum "
                        +  parsedDate, true, true, true, true);

                jf.setName("ispisa-racuna");
                jf.setMinimumSize(new Dimension(640, 400));
                jf.add(jv);
                
                jf.pack();

                Pro3View xp = (Pro3View)getApplication().getMainView();
                xp.Show(jf);

                jf.validate();
            }
        }
        catch (Exception ex)
        {
            Logger.getLogger(DnevniPromet.class.getName()).log(Level.SEVERE, null, ex);
            ExceptionView view = new ExceptionView(ex);
            view.setModal(true);
            view.setVisible(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.util.List<Pro3x.Code.AgregacijaPrometa> american;
    private java.util.List<Pro3x.Code.AgregacijaPrometa> bezGotovinskiPromet;
    private javax.swing.JButton cmdIspis;
    private javax.swing.JButton cmdOsvjezi;
    private javax.swing.JButton cmdZatvori;
    private javax.swing.JTextField datum;
    private java.util.List<Pro3x.Code.AgregacijaPrometa> diners;
    private java.util.List<Pro3x.Code.AgregacijaPrometa> gotovinskiPromet;
    private javax.swing.JTable grid;
    private javax.swing.JCheckBox ispisDirektno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private java.util.List<Pro3x.Code.AgregacijaPrometa> maestro;
    private java.util.List<Pro3x.Code.AgregacijaPrometa> mastercard;
    private javax.swing.JPanel panUkupno;
    private javax.persistence.EntityManager proManager;
    private javax.persistence.Query stavke;
    private java.util.List<Pro3x.Code.AgregacijaPrometa> stornoPromet;
    private javax.swing.JScrollPane tabAmerican;
    private javax.swing.JScrollPane tabBezGotovinski;
    private javax.swing.JScrollPane tabDiners;
    private javax.swing.JScrollPane tabGotovinski;
    private javax.swing.JScrollPane tabMaestercard;
    private javax.swing.JScrollPane tabMaestro;
    private javax.swing.JScrollPane tabStorno;
    private javax.swing.JScrollPane tabVisa;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JLabel ukupniPromet;
    private java.util.List<Pro3x.Code.AgregacijaPrometa> visa;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
