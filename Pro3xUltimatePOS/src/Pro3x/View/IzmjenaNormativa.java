/*
 * Pro3x Community project
 * Copyright (C) 2009  Aleksandar Zgonjan
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, http://www.gnu.org/licenses/gpl.html
 * and open the template in the editor.
 */

/*
 * IzmjenaNormativa.java
 *
 * Created on 14.11.2009., 18:55:22
 */

package Pro3x.View;

import Acosoft.Processing.Components.NumberCellEditor;
import Acosoft.Processing.Components.NumberCellRenderer;
import Acosoft.Processing.Components.Tasks;
import Acosoft.Processing.DataBox.ArtikalNormativ;
import Acosoft.Processing.DataBox.Roba;
import Acosoft.Processing.Pro3Postavke;
import Pro3x.BasicView;
import java.beans.PropertyVetoException;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.jdesktop.application.Action;
import org.jdesktop.observablecollections.ObservableCollections;

/**
 *
 * @author nonstop
 */
public class IzmjenaNormativa extends BasicView
{
    private Roba artikal;
    private List<ArtikalNormativ> normativi;
    private List<ArtikalNormativ> removeNormativi;
    private List<ArtikalNormativ> addNormativi;

    public Roba getArtikal()
    {
        return artikal;
    }

    /** Creates new form IzmjenaNormativa */
    private IzmjenaNormativa()
    {
        initComponents();
    }

    public IzmjenaNormativa(Roba roba)
    {
        this.artikal = roba;

        initComponents();

        this.setTitle("Normativi artikla " + roba.getNaziv());
        this.setName("normativi-" + roba.getKljuc());
        
        gridNormativi.getModel().addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e)
            {
                IzracunajUkupno();
            }
        });

        IzracunajUkupno();
    }

    public List<ArtikalNormativ> getNormativi()
    {
        return normativi;
    }

    public List<ArtikalNormativ> getDodajNormativi()
    {
        return addNormativi;
    }

    public List<ArtikalNormativ> getIzbrisiNormativi()
    {
        return removeNormativi;
    }

    public List<Roba> getArtikli()
    {
        return artikli;
    }

    private List<Roba> ListaJednostavnihArtikala()
    {
        if(java.beans.Beans.isDesignTime())
            return java.util.Collections.emptyList();
        else
        {
            queryRoba.setParameter("roba", getArtikal().getKljuc());
            List<Roba> sviArtikli = new LinkedList<Roba>(queryRoba.getResultList());
            return ObservableCollections.observableList(sviArtikli);

//            Složeni artikli se dodaju samo po normativima, pa više nije potrebno ograničenje
//            List<Roba> jednostavni = new LinkedList<Roba>();
//
//            for(Roba temp : sviArtikli)
//            {
//                if(temp.getNormativi().size() == 0)
//                    jednostavni.add(temp);
//            }
//
//            return ObservableCollections.observableList(jednostavni);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        proManager = getProManager();
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getResourceMap(IzmjenaNormativa.class);
        queryRoba = java.beans.Beans.isDesignTime() ? null : proManager.createQuery(resourceMap.getString("queryRoba.query")); // NOI18N
        artikli =  ListaJednostavnihArtikala();
        jPanel2 = new javax.swing.JPanel();
        cmdDodaj = new javax.swing.JButton();
        cmdIzbrisi = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        cmdSpremi = new javax.swing.JButton();
        cmdZatvori = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        OsvjeziArtikal();
        gridNormativi = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        gridArtikli = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        ukupno = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(resourceMap.getString("izmjena-normativa-v1.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(700, 500));
        setName("izmjena-normativa-v1"); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 500));

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getActionMap(IzmjenaNormativa.class, this);
        cmdDodaj.setAction(actionMap.get("DodajArtikal")); // NOI18N
        cmdDodaj.setText(resourceMap.getString("cmdDodaj.text")); // NOI18N
        cmdDodaj.setMaximumSize(new java.awt.Dimension(90, 30));
        cmdDodaj.setMinimumSize(new java.awt.Dimension(90, 30));
        cmdDodaj.setName("cmdDodaj"); // NOI18N
        cmdDodaj.setPreferredSize(new java.awt.Dimension(90, 30));
        jPanel2.add(cmdDodaj);

        cmdIzbrisi.setAction(actionMap.get("IzbrisiNormativ")); // NOI18N
        cmdIzbrisi.setText(resourceMap.getString("cmdIzbrisi.text")); // NOI18N
        cmdIzbrisi.setMaximumSize(new java.awt.Dimension(90, 30));
        cmdIzbrisi.setMinimumSize(new java.awt.Dimension(90, 30));
        cmdIzbrisi.setName("cmdIzbrisi"); // NOI18N
        cmdIzbrisi.setPreferredSize(new java.awt.Dimension(90, 30));
        jPanel2.add(cmdIzbrisi);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setName("jSeparator1"); // NOI18N
        jSeparator1.setPreferredSize(new java.awt.Dimension(6, 30));
        jPanel2.add(jSeparator1);

        cmdSpremi.setAction(actionMap.get("SpremiNormative")); // NOI18N
        cmdSpremi.setText(resourceMap.getString("cmdSpremi.text")); // NOI18N
        cmdSpremi.setMaximumSize(new java.awt.Dimension(90, 30));
        cmdSpremi.setMinimumSize(new java.awt.Dimension(90, 30));
        cmdSpremi.setName("cmdSpremi"); // NOI18N
        cmdSpremi.setPreferredSize(new java.awt.Dimension(90, 30));
        jPanel2.add(cmdSpremi);

        cmdZatvori.setAction(actionMap.get("Zatvori")); // NOI18N
        cmdZatvori.setText(resourceMap.getString("cmdZatvori.text")); // NOI18N
        cmdZatvori.setMaximumSize(new java.awt.Dimension(90, 30));
        cmdZatvori.setMinimumSize(new java.awt.Dimension(90, 30));
        cmdZatvori.setName("cmdZatvori"); // NOI18N
        cmdZatvori.setPreferredSize(new java.awt.Dimension(90, 30));
        jPanel2.add(cmdZatvori);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 0, 5));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout(0, 5));

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        gridNormativi.setAutoCreateRowSorter(true);
        gridNormativi.setName("gridNormativi"); // NOI18N
        gridNormativi.setRowHeight(35);
        gridNormativi.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        gridNormativi.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${normativi}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, gridNormativi, "normativiArtikla");
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${normativ}"));
        columnBinding.setColumnName("Normativ");
        columnBinding.setColumnClass(Acosoft.Processing.DataBox.Roba.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${normativ.maloprodajnaCijena}"));
        columnBinding.setColumnName("Normativ.maloprodajna Cijena");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${vrijednost}"));
        columnBinding.setColumnName("Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(gridNormativi);
        gridNormativi.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable1.columnModel.title1")); // NOI18N
        gridNormativi.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable1.columnModel.title2")); // NOI18N
        gridNormativi.getColumnModel().getColumn(1).setCellEditor(new NumberCellEditor());
        gridNormativi.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer(false, true, 3, 6));
        gridNormativi.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("gridNormativi.columnModel.title3")); // NOI18N
        gridNormativi.getColumnModel().getColumn(2).setCellRenderer(new NumberCellRenderer());
        gridNormativi.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("gridNormativi.columnModel.title2")); // NOI18N
        gridNormativi.getColumnModel().getColumn(3).setCellRenderer(new NumberCellRenderer());

        jSplitPane1.setRightComponent(jScrollPane2);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        gridArtikli.setAutoCreateRowSorter(true);
        gridArtikli.setName("gridArtikli"); // NOI18N
        gridArtikli.setRowHeight(35);
        gridArtikli.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        gridArtikli.getTableHeader().setReorderingAllowed(false);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${artikli}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, gridArtikli);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${naziv}"));
        columnBinding.setColumnName("Naziv");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cijena}"));
        columnBinding.setColumnName("Cijena");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(gridArtikli);
        gridArtikli.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("gridArtikli.columnModel.title0")); // NOI18N
        gridArtikli.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("gridArtikli.columnModel.title1")); // NOI18N
        gridArtikli.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer(false, true, 2, 2));

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel3.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(646, 120));
        jPanel1.setLayout(new java.awt.BorderLayout());

        ukupno.setFont(resourceMap.getFont("naziv-artikla.font")); // NOI18N
        ukupno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ukupno.setName("naziv-artikla"); // NOI18N
        jPanel1.add(ukupno, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void DodajArtikal()
    {
        if(getOdabraniArtikal() == null)
        {
            Tasks.showMessage("Odaberite artikal koji želite dodati kao normativ.");
            return;
        }

        Roba roba = getOdabraniArtikal();

        if(roba.getNormativi().size() == 0)
        {
            ArtikalNormativ normativ = new ArtikalNormativ();

            normativ.setArtikal(getArtikal());
            normativ.setNormativ(roba);
            normativ.setKolicina(1D);

            getDodajNormativi().add(normativ);
            getNormativi().add(normativ);
        }
        else
        {
            int result = JOptionPane.showConfirmDialog(this, "Normativi artikla ne mogu sadržavati složene artikle.\n" +
                    "Želite li dodati sve normative artikla " + getOdabraniArtikal().getNaziv() + " kao normative artikla " + getArtikal().getNaziv() + "?",
                    "Upozorenje", JOptionPane.YES_NO_OPTION);
            
            if(result == JOptionPane.YES_OPTION)
            {
                for(ArtikalNormativ temp : roba.getNormativi())
                {
                    ArtikalNormativ normativ = new ArtikalNormativ();

                    normativ.setArtikal(getArtikal());
                    normativ.setNormativ(temp.getNormativ());
                    normativ.setKolicina(temp.getKolicina());

                    getDodajNormativi().add(normativ);
                    getNormativi().add(normativ);
                }
            }
        }

        IzracunajUkupno();
    }

    private void IzracunajUkupno()
    {
        String valuta;
        
        try
        {
            valuta = Pro3Postavke.getInfo().getValuta();
        }
        catch (Exception ex)
        {
            Logger.getLogger(IzmjenaNormativa.class.getName()).log(Level.SEVERE, null, ex);
            valuta = "kn";
        }

        NumberFormat nf = NumberFormat.getInstance();
        nf.setMinimumFractionDigits(2);
        nf.setMaximumFractionDigits(2);

        String vrijednost = nf.format(getArtikal().getVrijednostNormativa());
        ukupno.setText("Ukupno: " + vrijednost + " " + valuta);
    }

    public Roba getOdabraniArtikal()
    {
        int index = gridArtikli.getSelectedRow();
        
        if(index >= 0)
            return (Roba) getArtikli().get(gridArtikli.convertRowIndexToModel(index));
        else
            return null;
    }

    public ArtikalNormativ getOdabraniNormativ()
    {
        int index = gridNormativi.getSelectedRow();

        if(index >= 0)
        {
            index = gridNormativi.convertRowIndexToModel(index);
            return (ArtikalNormativ) getNormativi().get(index);
        }
        else
            return null;
    }

    @Action
    public void Zatvori()
    {
        try
        {
            this.setClosed(true);
        }
        catch (PropertyVetoException ex)
        {
            Logger.getLogger(IzmjenaNormativa.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Action
    public void IzbrisiNormativ()
    {
        ArtikalNormativ normativ = getOdabraniNormativ();

        if(normativ == null)
        {
            Tasks.showMessage("Odaberite normativ koji želite izbrisati.");
            return;
        }

        if(getDodajNormativi().contains(normativ))
            getDodajNormativi().remove(normativ);
        else
            getIzbrisiNormativi().add(normativ);

        getNormativi().remove(normativ);

        IzracunajUkupno();
    }
    
    private void OsvjeziArtikal()
    {
        this.artikal = proManager.find(Roba.class, this.artikal.getKljuc());
        proManager.refresh(this.artikal);

        this.normativi = ObservableCollections.observableList(artikal.getNormativi());
        this.addNormativi = new LinkedList<ArtikalNormativ>();
        this.removeNormativi = new LinkedList<ArtikalNormativ>();
    }

    @Action
    public void SpremiNormative()
    {
        proManager.getTransaction().begin();

        for(ArtikalNormativ normativ : getIzbrisiNormativi())
            proManager.remove(normativ);

        for(ArtikalNormativ normativ : getDodajNormativi())
            proManager.persist(normativ);

        proManager.getTransaction().commit();

        getIzbrisiNormativi().clear();
        getDodajNormativi().clear();

        Tasks.showMessage("Normativi artikla " + getArtikal().getNaziv() + " su uspješno spremljeni.");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.util.List<Roba> artikli;
    private javax.swing.JButton cmdDodaj;
    private javax.swing.JButton cmdIzbrisi;
    private javax.swing.JButton cmdSpremi;
    private javax.swing.JButton cmdZatvori;
    private javax.swing.JTable gridArtikli;
    private javax.swing.JTable gridNormativi;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.persistence.EntityManager proManager;
    private javax.persistence.Query queryRoba;
    private javax.swing.JLabel ukupno;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
