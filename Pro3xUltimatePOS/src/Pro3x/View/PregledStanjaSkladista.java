/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PregledStanjaSkladista.java
 *
 * Created on 2009.12.31, 16:42:50
 */

package Pro3x.View;

import Acosoft.Processing.Components.ExceptionView;
import Acosoft.Processing.Components.NumberCellRenderer;
import Acosoft.Processing.Components.Tasks;
import Acosoft.Processing.Pro3App;
import Acosoft.Processing.Pro3Postavke;
import Acosoft.Processing.Pro3View;
import Pro3x.Code.ReportingServices;
import java.beans.PropertyVetoException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JasperPrint;
import org.jdesktop.application.Action;
import org.jdesktop.observablecollections.ObservableCollections;

/**
 *
 * @author Aco
 */
public class PregledStanjaSkladista extends javax.swing.JInternalFrame {

    private SimpleDateFormat sf;
    /** Creates new form PregledStanjaSkladista */
    public PregledStanjaSkladista() 
    {
//        sf = new SimpleDateFormat("dd.MM.yyyy");
//        StanjeSkladista stanje = new StanjeSkladista();
//
//        model = new LinkedList<PrivremenaKalkulacija>();
//        model = ObservableCollections.observableList(model);       
//
//        setModel(model);
//        getModel().addAll(stanje.load());
//        stanje.dispose();
//
//        initComponents();
//
//        setDatum(Calendar.getInstance().getTime());
//        datumPregleda.setText(sf.format(getDatum()));
//        
//        if(getModel().size() > 0)
//            grid.setRowSelectionInterval(0, 0);
//
//        IzracunajMaloprodajnuVrijednost();
    }        

//    private Double IzracunajMaloprodajnuVrijednost()
//    {
//        List<PrivremenaKalkulacija> kalkulacije = getModel();
//        double suma = 0D;
//
//        for(PrivremenaKalkulacija kalkulacija : kalkulacije)
//            suma += kalkulacija.getUkupnaMaloprodajnaVrijednost();
//
//        NumberFormat nf = NumberFormat.getInstance();
//        nf.setMinimumFractionDigits(2);
//        nf.setMaximumFractionDigits(2);
//
//        String valuta = "kn";
//
//        try
//        {
//            valuta = Pro3Postavke.getInfo().getValuta();
//        }
//        catch (Exception ex)
//        {
//            Logger.getLogger(PregledStanjaSkladista.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        prikazUkupneVrijednosti.setText(nf.format(suma) + " " + valuta);
//
//        return suma;
//    }

//    protected List<PrivremenaKalkulacija> model;
//
//    public List<PrivremenaKalkulacija> getModel() {
//        return model;
//    }
//
//    public void setModel(List<PrivremenaKalkulacija> model) {
//        this.model = model;
//    }
//
//    public PrivremenaKalkulacija getOdabranaKalkulacija() 
//    {
//        int index = grid.getSelectedRow();
//        if(index >= 0)
//        {
//            int mindex = grid.convertRowIndexToModel(index);
//            return getModel().get(mindex);
//        }
//        else return null;
//    }
//
//    public void setOdabranaKalkulacija(PrivremenaKalkulacija odabranaKalkulacija) {
//        int mindex = getModel().indexOf(odabranaKalkulacija);
//        if(mindex >= 0)
//        {
//            int index = grid.convertRowIndexToView(mindex);
//            grid.setRowSelectionInterval(index, index);
//        }
//    }

    protected Date datum;

    public Date getDatum() {
        return datum;
    }

    public void setDatum(Date datum) {
        this.datum = datum;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        commandPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        datumPregleda = new javax.swing.JTextField();
        cmdPromjeni = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        cmdKartica = new javax.swing.JButton();
        cmdZatvori = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grid = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        prikazUkupneVrijednosti = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getResourceMap(PregledStanjaSkladista.class);
        setTitle(resourceMap.getString("stanje-skladista-v1.title")); // NOI18N
        setName("stanje-skladista-v1"); // NOI18N

        commandPanel.setName("commandPanel"); // NOI18N
        commandPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 6, 5));

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        commandPanel.add(jLabel1);

        datumPregleda.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        datumPregleda.setText(resourceMap.getString("datumPregleda.text")); // NOI18N
        datumPregleda.setMinimumSize(new java.awt.Dimension(140, 29));
        datumPregleda.setName("datumPregleda"); // NOI18N
        datumPregleda.setPreferredSize(new java.awt.Dimension(140, 26));
        datumPregleda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PostaviZadanuAkciju(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                UkloniZadanuAkciju(evt);
            }
        });
        commandPanel.add(datumPregleda);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getActionMap(PregledStanjaSkladista.class, this);
        cmdPromjeni.setAction(actionMap.get("PromjeniPregled")); // NOI18N
        cmdPromjeni.setText(resourceMap.getString("cmdPromjeni.text")); // NOI18N
        cmdPromjeni.setName("cmdPromjeni"); // NOI18N
        commandPanel.add(cmdPromjeni);

        jButton1.setAction(actionMap.get("IspisStanjaSkladista")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        commandPanel.add(jButton1);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setName("jSeparator1"); // NOI18N
        jSeparator1.setPreferredSize(new java.awt.Dimension(2, 23));
        commandPanel.add(jSeparator1);

        cmdKartica.setAction(actionMap.get("OtvoriKarticu")); // NOI18N
        cmdKartica.setText(resourceMap.getString("cmdKartica.text")); // NOI18N
        cmdKartica.setName("cmdKartica"); // NOI18N
        commandPanel.add(cmdKartica);

        cmdZatvori.setAction(actionMap.get("Zatvori")); // NOI18N
        cmdZatvori.setText(resourceMap.getString("cmdZatvori.text")); // NOI18N
        cmdZatvori.setName("cmdZatvori"); // NOI18N
        commandPanel.add(cmdZatvori);

        getContentPane().add(commandPanel, java.awt.BorderLayout.PAGE_END);

        contentPanel.setName("contentPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        grid.setAutoCreateRowSorter(true);
        grid.setMaximumSize(null);
        grid.setName("grid"); // NOI18N
        grid.setRowHeight(24);
        grid.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${model}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, grid);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${artikal}"));
        columnBinding.setColumnName("Artikal");
        columnBinding.setColumnClass(Acosoft.Processing.DataBox.Roba.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${mjera}"));
        columnBinding.setColumnName("Mjera");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${maloprodajnaCijena}"));
        columnBinding.setColumnName("Maloprodajna Cijena");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${ukupnaMaloprodajnaVrijednost}"));
        columnBinding.setColumnName("Ukupna Maloprodajna Vrijednost");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(grid);
        grid.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("grid.columnModel.title0")); // NOI18N
        grid.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("grid.columnModel.title2")); // NOI18N
        grid.getColumnModel().getColumn(1).setCellRenderer(new NumberCellRenderer());
        grid.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("grid.columnModel.title1")); // NOI18N
        grid.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("grid.columnModel.title3")); // NOI18N
        grid.getColumnModel().getColumn(3).setCellRenderer(new NumberCellRenderer());
        grid.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("grid.columnModel.title4")); // NOI18N
        grid.getColumnModel().getColumn(4).setCellRenderer(new NumberCellRenderer());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(661, 120));

        prikazUkupneVrijednosti.setFont(resourceMap.getFont("prikazUkupneVrijednosti.font")); // NOI18N
        prikazUkupneVrijednosti.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prikazUkupneVrijednosti.setText(resourceMap.getString("prikazUkupneVrijednosti.text")); // NOI18N
        prikazUkupneVrijednosti.setName("prikazUkupneVrijednosti"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(prikazUkupneVrijednosti, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(prikazUkupneVrijednosti, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE))
                .addContainerGap())
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE))
        );

        getContentPane().add(contentPanel, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PostaviZadanuAkciju(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PostaviZadanuAkciju
        getRootPane().setDefaultButton(cmdPromjeni);
    }//GEN-LAST:event_PostaviZadanuAkciju

    private void UkloniZadanuAkciju(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UkloniZadanuAkciju
        getRootPane().setDefaultButton(null);
    }//GEN-LAST:event_UkloniZadanuAkciju

    @Action
    public void Zatvori()
    {
        try
        {
            setClosed(true);
        } 
        catch (PropertyVetoException ex)
        {
            Logger.getLogger(PregledStanjaSkladista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Action
    public void PromjeniPregled()
    {
//        try {
//            Date noviDatum = sf.parse(datumPregleda.getText());
//
//            Calendar cal = Calendar.getInstance();
//            cal.setTime(noviDatum);
//            cal.add(Calendar.DATE, 1);
//            noviDatum = cal.getTime();
//
//            StanjeSkladista stanje = new StanjeSkladista(noviDatum);
//
//            getModel().clear();
//            getModel().addAll(stanje.load());
//            stanje.dispose();
//
//            setDatum(noviDatum);
//
//            IzracunajMaloprodajnuVrijednost();
//
//        } catch (ParseException ex) {
//            Logger.getLogger(PregledStanjaSkladista.class.getName()).log(Level.SEVERE, null, ex);
//            Tasks.showMessage("Iznimka: Neispravan format datuma. Ponovite unos datuma.");
//
//            datumPregleda.setText(sf.format(getDatum()));
//        }
    }

    @Action
    public void OtvoriKarticu()
    {
//        if(getOdabranaKalkulacija() != null)
//        {
//            Pro3View view = (Pro3View) Pro3App.getApplication().getMainView();
//            view.Show(new PregledKartice(getOdabranaKalkulacija().getArtikal()));
//        }
//        else Tasks.showMessage("Izaberite artikal za prikaz kartice.");
    }

    @Action
    public void IspisStanjaSkladista()
    {
//        try
//        {
//            HashMap params = new HashMap();
//            params.put("Logo", Pro3Postavke.getLogoStream());
//            params.put("Zaglavlje", Pro3Postavke.getInfo().getZaglavlje());
//
//            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
//            params.put("Datum", sdf.format(Calendar.getInstance().getTime()));
//            params.put("Vrijednost", IzracunajMaloprodajnuVrijednost());
//
//            List<PrivremenaKalkulacija> data = getModel().subList(0, getModel().size());
//            Collections.sort(data, new Comparator<PrivremenaKalkulacija>()
//            {
//                public int compare(PrivremenaKalkulacija o1, PrivremenaKalkulacija o2)
//                {
//                    return o1.getArtikal().getNaziv().compareTo(o2.getArtikal().getNaziv());
//                }
//            });
//
//            String report = "resources/Pro3xCiscenjeSkladista.jasper";
//            JasperPrint jp = ReportingServices.LoadReport(PrikazPrivremenihKalkulacija.class, report, params, data);
//            ReportingServices.ShowReport(jp, "Ispis stanja skladišta", "ispis-ciscenje");
//        }
//        catch (Exception ex)
//        {
//            Logger.getLogger(PrikazPrivremenihKalkulacija.class.getName()).log(Level.SEVERE, null, ex);
//            new ExceptionView(ex).setVisible(true);
//        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdKartica;
    private javax.swing.JButton cmdPromjeni;
    private javax.swing.JButton cmdZatvori;
    private javax.swing.JPanel commandPanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JTextField datumPregleda;
    private javax.swing.JTable grid;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel prikazUkupneVrijednosti;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
