/*
 * Pro3x Community project
 * Copyright (C) 2009  Aleksandar Zgonjan
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, http://www.gnu.org/licenses/gpl.html
 * and open the template in the editor.
 */

/*
 * PostavkeBazePodataka.java
 *
 * Created on 2009.07.23, 19:40:50
 */

package Pro3x.View;

import Acosoft.Processing.Pro3App;
import Pro3x.Configuration.BazaPodataka;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxEditor;
import javax.swing.ComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.ListDataListener;
import javax.swing.plaf.ComboBoxUI;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jvnet.substance.SubstanceComboBoxUI;
import org.jvnet.substance.utils.combo.SubstanceComboBoxEditor;

/**
 *
 * @author nonstop
 */
public class DatabaseConfiguration extends javax.swing.JInternalFrame
{
    public static final String ConfigPath = "pro3x-database-configuration.xml";
    private List<DriverInfo> drivers;
    private DriverInfo selectedDriver;
    private DriverInfo initialDriver;

    public String getTrenutniConnectionString() {
        return getSelectedDriver().getConnectionString();
    }

    public void setTrenutniConnectionString(String trenutniConnectionString) {
        getSelectedDriver().setConnectionString(trenutniConnectionString);
        getPostavkeBaze().setConnection(trenutniConnectionString);
    }
    
    /** Creates new form PostavkeBazePodataka */
    public DatabaseConfiguration(BazaPodataka postavke) {
        xPostavkeBaze = postavke;
        drivers = new ArrayList<DriverInfo>();
        
        drivers.add(new DriverInfo("org.apache.derby.jdbc.EmbeddedDriver", "jdbc:derby:<putanja>"));
        drivers.add(new DriverInfo("org.apache.derby.jdbc.ClientDriver", "jdbc:derby://localhost:1527/<baza>;create=true"));
        drivers.add(new DriverInfo("com.mysql.jdbc.Driver", "jdbc:mysql://localhost:3306/<baza>"));
        
        selectedDriver = null;
        
        for (DriverInfo driverInfo : drivers) {
            if(getPostavkeBaze().getDriver().equals(driverInfo.getDriver()))
            {
                selectedDriver = driverInfo;
                initialDriver = driverInfo;
                driverInfo.setConnectionString(postavke.getConnection());
                break;
            }
        }
        
        initComponents();
        
        this.addInternalFrameListener(new InternalFrameAdapter() {

            @Override
            public void internalFrameOpened(InternalFrameEvent e) {
                driverCombo.setSelectedItem(initialDriver);
            }
        });

        connection.setText(postavke.getConnection());
        getRootPane().setDefaultButton(spremi);
    }
    
    public DatabaseConfiguration()
    {
        //TODO: Promjeni u produkcijske vrijednosti
        xPostavkeBaze = new BazaPodataka();
        xPostavkeBaze.setKorisnik("");
        xPostavkeBaze.setZaporka("");
        xPostavkeBaze.setDriver("org.apache.derby.jdbc.EmbeddedDriver");
        xPostavkeBaze.setConnection("jdbc:derby:demo;create=true");
        initComponents();
    }
    
    public List<DriverInfo> getDrivers()
    {
        return drivers;
    }

    public DriverInfo getSelectedDriver() {
        return selectedDriver;
    }

    public void setSelectedDriver(DriverInfo selectedDriver) {
        this.selectedDriver = selectedDriver;
        
        this.getPostavkeBaze().setDriver(selectedDriver.getDriver());
        connection.setText(selectedDriver.getConnectionString());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel4 = new javax.swing.JPanel();
        spremi = new javax.swing.JButton();
        zatvori = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        driverCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        zaporka = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        korisnik = new javax.swing.JTextField();
        connection = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getResourceMap(DatabaseConfiguration.class);
        setTitle(resourceMap.getString("postavke-pristupa-bazi")); // NOI18N
        setName("postavke-pristupa-bazi-v3"); // NOI18N
        setNormalBounds(new java.awt.Rectangle(0, 0, 567, 483));
        setPreferredSize(new java.awt.Dimension(567, 483));

        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class).getContext().getActionMap(DatabaseConfiguration.class, this);
        spremi.setAction(actionMap.get("SaveDatabaseConfiguration")); // NOI18N
        spremi.setText(resourceMap.getString("spremi.text")); // NOI18N
        spremi.setName("spremi"); // NOI18N
        spremi.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel4.add(spremi);

        zatvori.setText(resourceMap.getString("zatvori.text")); // NOI18N
        zatvori.setName("zatvori"); // NOI18N
        zatvori.setPreferredSize(new java.awt.Dimension(100, 30));
        zatvori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Zatvori(evt);
            }
        });
        jPanel4.add(zatvori);

        getContentPane().add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 5, 0, 5));
        jPanel5.setName("jPanel5"); // NOI18N
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Virtualni Savjetnik"));
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel5.setName("jLabel5"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 15, 10, 10));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jLabel3.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel3.add(jLabel3, gridBagConstraints);

        driverCombo.setMinimumSize(new java.awt.Dimension(41, 32));
        driverCombo.setName("driver-combo"); // NOI18N
        driverCombo.setPreferredSize(new java.awt.Dimension(41, 32));

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${drivers}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, driverCombo);
        bindingGroup.addBinding(jComboBoxBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedDriver}"), driverCombo, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel3.add(driverCombo, gridBagConstraints);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel3.add(jLabel1, gridBagConstraints);

        zaporka.setMargin(new java.awt.Insets(0, 5, 0, 5));
        zaporka.setName("zaporka"); // NOI18N
        zaporka.setPreferredSize(new java.awt.Dimension(20, 30));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${postavkeBaze.zaporka}"), zaporka, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel3.add(zaporka, gridBagConstraints);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jLabel2.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel3.add(jLabel2, gridBagConstraints);

        korisnik.setMargin(new java.awt.Insets(0, 5, 0, 5));
        korisnik.setName("korisnik"); // NOI18N
        korisnik.setPreferredSize(new java.awt.Dimension(14, 30));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${postavkeBaze.korisnik}"), korisnik, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel3.add(korisnik, gridBagConstraints);

        connection.setMargin(new java.awt.Insets(0, 5, 0, 5));
        connection.setName("connection"); // NOI18N
        connection.setPreferredSize(new java.awt.Dimension(20, 30));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${trenutniConnectionString}"), connection, org.jdesktop.beansbinding.BeanProperty.create("text"), "selected-driver-connection");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel3.add(connection, gridBagConstraints);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jLabel4.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Zatvori(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Zatvori
    {//GEN-HEADEREND:event_Zatvori
        try
        {
            setClosed(true);
        }
        catch (PropertyVetoException ex)
        {
            Logger.getLogger(DatabaseConfiguration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Zatvori

    private BazaPodataka xPostavkeBaze;

    public final BazaPodataka getPostavkeBaze()
    {
        return xPostavkeBaze;
    }

    @Action
    public Task SaveDatabaseConfiguration()
    {
        JFrame topframe = Pro3App.getApplication().getMainFrame();
        int result = JOptionPane.showConfirmDialog(topframe, "Aplikacija će se ugasiti nakon promjene postavki za pristup bazi podataka.\n" +
                "Želite li spremiti postavke i ugasiti aplikaciju?", "Upozorenje", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if(result == JOptionPane.YES_OPTION)
        {
            this.Zatvori(null);
            return new SaveDatabaseConfigurationTask(org.jdesktop.application.Application.getInstance(Acosoft.Processing.Pro3App.class));
        }
        else
            return null;
    }

    private class SaveDatabaseConfigurationTask extends org.jdesktop.application.Task<Object, Void> {
        SaveDatabaseConfigurationTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to SaveDatabaseConfigurationTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() throws IOException {
            //TODO: lokaliziraj poruke
            setMessage("Spremam postavke za pristup bazi podataka.");
            getApplication().getContext().getLocalStorage().save(xPostavkeBaze, ConfigPath);
                       
            setMessage("Postavke za pristup bazi podataka su uspješno spremljene.");
            try
            {
                Thread.sleep(1000);
                setMessage("Pro3x Nautilus Edition, gašenje .");
                setProgress(0.25F);
                Thread.sleep(250);
                setMessage("Pro3x Nautilus Edition, gašenje ..");
                setProgress(0.50F);
                Thread.sleep(250);
                setMessage("Pro3x Nautilus Edition, gašenje ...");
                setProgress(0.75F);
                Thread.sleep(1000);
            }
            catch (InterruptedException ex)
            {
                Logger.getLogger(DatabaseConfiguration.class.getName()).log(Level.SEVERE, null, ex);
            }
            

            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result)
        {
            getApplication().exit();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField connection;
    private javax.swing.JComboBox driverCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField korisnik;
    private javax.swing.JButton spremi;
    private javax.swing.JPasswordField zaporka;
    private javax.swing.JButton zatvori;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
